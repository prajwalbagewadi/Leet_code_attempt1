Big O notation is a mathematical way to describe the Performance of algorithm especially in terms
of Time and Space requirements as the Input Size grows.

Big O gives you the worst case estimate of how an algorithm behaves when the Input Size(N) increases.
helping us compare different algorithms and choose the most efficent one.

Big O       | What it Means                        | Example                                 | Analogy
----------- | ------------------------------------- | ----------------------------------------| -----------------------------------------------
O(1)        | Constant time – doesn’t grow with n   | Access an element in an array: arr[5]   | Like picking a book from a shelf by index
O(log n)    | Fast – cuts the problem in half       | Binary search in a sorted array         | Like guessing a number: "higher/lower"
O(n)        | Grows with input size                 | Looping through all items in a list     | Like checking each book one by one
O(n log n)  | Slightly slower than linear           | Merge sort or quicksort                 | Like organizing books using divide & conquer
O(n²)       | Very slow – nested loops              | Bubble sort, comparing every pair       | Like comparing every student with every other
O(2ⁿ)       | Extremely slow                        | Recursive Fibonacci                     | Like trying every possibility in a puzzle
O(n!)       | Unbelievably slow                     | Brute-force for TSP (all permutations)  | Like trying every way to arrange books

To Calculate Big O notation you analyze how the number of operations in your algorithm grows as the Input Size(N) increases.

How to Calculate 

1. Identify the input size (n)
Look at the variables that represent the size of the input (e.g., array length, number of nodes).

2. Count basic operations
Count the number of times loops, recursion, or function calls are executed.

3. Focus on the dominant term
Ignore constants and less significant terms. Big O only cares about growth as n becomes large.

Example: 3n + 5 → O(n)

4. Drop constants
O(2n) becomes O(n)

O(5n² + 3n) becomes O(n²)

5. Check nested structures
A loop inside another loop multiplies complexity.

6. For recursive functions
Write a recurrence relation, then solve it.


Step | What to Do                            | Purpose / Tip
-----|----------------------------------------|--------------------------------------------
1    | Look for loops or recursion            | Repeated actions mean growing time
2    | Count how many times they run          | Helps find total operations
3    | Multiply nested loops (if any)         | Each level of loop increases growth
4    | Add separate loops                     | Then choose the one that grows faster
5    | Drop constants and small terms         | Keep only the highest-growing term (e.g., n²)
6    | Write final Big O notation             | O(1), O(n), O(n²), O(log n), etc.

Quick Tip:
- Single loop        → O(n)
- Nested loop        → O(n²)
- Halving each time → O(log n)
- Constant work      → O(1)

Example 1: constant Time(O(1))
System.out.println("hello");
- This Runs once, no matter what N is.
- Big O = O(1)

Example 2: Linear Time — O(n)
for (int i=0; i<n; i++) {
  sop(i);
}
- Runs n times -> if n=5,runs 5 times
- Big O = O(n)

Example 3: Quadratic Time — O(n²)
for (int i=0; i<n; i++) {
  for (int j=0; j<n; j++) {
      sop(i+","+j)
  }
}
- Outer loop = n times
- Inner loop = n times
- Total = n*n = O(n^2)

Example 4: Logarithmic Time — O(log n)
int n=100;
while (n>1) {
  System.out.println("n="+n);
  n=n/2;
}
output :
Try programiz.pro
n=100
n=50
n=25
n=12
n=6
n=3
- n becomes half each time -> 100 -> 50 -> 25 -> ...
- This is O(log n)(like binary search)

| Code Pattern      | Big O    |
| ----------------- | -------- |
| One step          | O(1)     |
| One loop          | O(n)     |
| Loop inside loop  | O(n²)    |
| Halving each time | O(log n) |
